<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>snow-dev.com</title>
    <link>https://snow-dev.com</link>
    <description>A blog about linux, vim, devops and various other tech topics</description>
    <managingEditor>marcel.patzwahl@posteo.de (Marcel Patzwahl)</managingEditor>
    <pubDate>Sun, 20 Dec 2020 17:59:16 +0100</pubDate>
    <item>
      <title>Build your own Git Server with a Raspberry Pi</title>
      <link>https://snow-dev.com/posts/build-your-own-git-server-with-a-raspberry-pi.html</link>
      <description>In this post I want to go into a topic, which I did a few months ago. My goal was to get some of my data away from big cloud hosting platforms back into my own control. The initial spark was a news about a french artist, who had all his pictures on googles platform blogger. His blog was deleted out of no reason and his whole work was lost. You can read the whole storyhere. Scared of a similar scenario, I decided to setup my own cloud with seafile and my own Git server. In this post I will cover how to put up a simple Git server with a basic web fronted to view the repositories.</description>
      <author>Marcel Patzwahl</author>
      <pubDate>Sat, 03 Jun 2017 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Creating your own PHP dev-env in Vagrant: Bonus 1</title>
      <link>https://snow-dev.com/posts/creating-your-own-php-dev-env-in-vagrant-bonus-1.html</link>
      <description>In the previous posts we&#39;ve successfully set up a development environment for PHP. In the following posts I will present some bonus things, which you can do, to optimize your work with vagrant. In this post I will show you how to set a virtual host in apache inside your guest system. Because IP addresses can be forgotten quite easily, it&#39;s much more handy to have a short named address under which you can access your web app. In this project we will create a virtual host for our main project directory called mysite.dev. So let&#39;s get started!</description>
      <pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Creating your own PHP dev-env in Vagrant: Bonus 2</title>
      <link>https://snow-dev.com/posts/creating-your-own-php-dev-env-in-vagrant-bonus-2.html</link>
      <description>Slowly but surely we get to the end of this series. In this last post, I will write about database access from the host system, while your database is running on the guest machine. Therefore I will present two strategies to do so. Sure you also can</description>
      <pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Creating your own PHP dev-env in Vagrant: Part 2</title>
      <link>https://snow-dev.com/posts/creating-your-own-php-dev-env-in-vagrant-part-2.html</link>
      <description>In the last post we installed vagrant and enabled the vagrant settings we need in the Vagrantfile. We have set a base image of ubuntu 14.04, made a synced folder and enabled a private network connection between host and guest system. Now it&#39;s time to write our first shell scripts, which will configure our guest system to serve as a web server. Vagrant comes with a neat feature called provisioning. This can be shell scripts, which will be executed or files, which will be uploaded onto the guest system. Of course there are more provisioners to explore. For a full reference head over here. In this tutorial we will focus on these two provisioners.</description>
      <pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Creating your own PHP dev-env in Vagrant: Part 3</title>
      <link>https://snow-dev.com/posts/creating-your-own-php-dev-env-in-vagrant-part-3.html</link>
      <description>In the previous post we&#39;ve set up the apache web server successfully. Now it&#39;s time to add MySQL and PHP to finish the LAMP stack.</description>
      <pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Creating your own PHP dev-env in Vagrant</title>
      <link>https://snow-dev.com/posts/creating-your-own-php-dev-env-in-vagrant.html</link>
      <description>In this series of posts we will be creating a development environment(dev-env) for PHP with the help of vagrant. Vagrant is a thin wrapper around different virtualization software projects like virtual box, which we will be using in this tutorial. The so called wrapper of vagrant is a configuration file, written in the ruby programming language. But don&#39;t worry, you don&#39;t need to be an expert ruby programmer to setup a dev-env in vagrant. Everything we use it for, are some variable assignments. In this configuration file we can tell the virtualization software, which operating system and software to install and how to configure everything. Our ultimate goal here is, if the environment is started, everything is setup already. Finally we want to get a fully configured LAMP stack with a running apache webserver, a mysql database and PHP. As always there are many different ways to glory. For example does vagrant offer different ready to use recipes via chef. There is also support for Puppet, a unified configuration language for different systems. We won&#39;t use any of these plugins in this series. Everything we will work with, are some bash scripts and the vagrant file. I have chosen this path, because I want to keep the full control over everything. On the other hand it&#39;s also more work, but I think it&#39;s worth it. Before we go into the details, lets talk about the advantages of a vagrant based development environments.</description>
      <pubDate>Fri, 03 Jun 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>ECS CD with AWS CodePipeline in Terraform</title>
      <link>https://snow-dev.com/posts/ecs-cd-with-codepipeline-in-terraform.html</link>
      <description>Last week I came along a problem regarding the deployment of an ECS Service. I wanted to use the newly announced Blue/Green-Deployment powered by CodeDeploy, because for the time being I only needed one Fargate instance to run. The classic ECS Deployment destroyed one instance and started a new one in it&#39;s place. With one instance this would mean, we would have some downtime during the start of the new container.</description>
      <pubDate>Tue, 21 May 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>A basic Routing approach with PHP</title>
      <link>https://snow-dev.com/posts/how-modern-routing-works-in-php.html</link>
      <description>Nice and readable URLs are the way to go in modern web applications. More and more people are abandoning the old style URLs, containing question marks and  equal signs, in favor of the slash separation for actions and parameters. Most frameworks are already supporting this new kind of URLs and encapsulate the logic inside of a routing class or module. Everyone is using it and everything is good so far. But even if these new URLs are all over the place, there is very little information on the net about how it is actually implemented. Because I&#39;m currently working on a minimalistic PHP MVC Framework with a friend, I came across this problem. Beside of the source code of the big players in PHP Frameworks I found a small and easy to use snippet to get routes working pretty fast. In this post I want to present the key PHP feature, which allows us to realize it and how to build upon it.</description>
      <pubDate>Wed, 07 Oct 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Increase disk space of a vagrant machine</title>
      <link>https://snow-dev.com/posts/increase-disk-space-of-a-vagrant-machine.html</link>
      <description>Lately I came across a rather big problem of vagrant Increasing the disk space, because the normal 40GB were in use. There are options to increase RAM or CPU count easily.</description>
      <pubDate>Wed, 26 Oct 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>How to migrate from Serverless to CDK</title>
      <link>https://snow-dev.com/posts/migrate-from-serverless-to-cdk.html</link>
      <description>The Serverless Application Framework was the go to solution to deploy serverless application stacks, like AWS Lambda for quite a while. It offers a very easy to use YAML DSL to deploy common serverless patterns, like a Lambda function behind an API Gateway. However if serverless applications become more complex and consist of more than the default resources, you were back writing at CloudFormation again.</description>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>Next level dotfiles with Ansible</title>
      <link>https://snow-dev.com/posts/next-level-dotfiles-with-ansible.html</link>
      <description>In the life of every linux enthusiast comes the point, where he has a lot of individual configuration build up and wants to migrate these settings over to another machine as seamlessly as possible. At this point a whole philosophy of how to do this is coming into play. Today this philosophy is bundled under the name: dotfiles. Historically dotfiles are the config files, which lie in your home directory.</description>
      <author>Marcel Patzwahl</author>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>The power of Vim Plugins: CtrlP</title>
      <link>https://snow-dev.com/posts/the-power-of-vim-plugins-ctrlp.html</link>
      <description>In this article we will discover one of the greatest and most widely used plugins in the vim world: CtrlP. It covers a similar area like NERDTree, because it helps you to find and open files very quickly. The magic behind this plugin is it&#39;s fuzzy search engine.</description>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>The power of Vim Plugins: NERDTree</title>
      <link>https://snow-dev.com/posts/the-power-of-vim-plugins-nerdtree.html</link>
      <description>Hey everyone, this time we will cover a plugin called NERDTree. This is the kind of addition, which shows the file system with all it&#39;s files and sub folders. It is a great tool to keep an overview, when working on a project or a big set of files.</description>
      <pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>The power of Vim Plugins: netrw</title>
      <link>https://snow-dev.com/posts/the-power-of-vim-plugins-netrw.html</link>
      <description>This time we look into an alternative for NERDTree, which is called netrw. Thanks to aguerosantiale, who put my attention onto it. Both plugins serve the same purpose, but they behave fundamentaly different in archiving this.</description>
      <pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>The power of Vim Plugins: Vim-Plug</title>
      <link>https://snow-dev.com/posts/the-power-of-vim-plugins-vim-plug.html</link>
      <description>A few weeks after my Vundle post, I stumbled upon a plugin manager called vim-plug. It sounded very promising and I checked it out. Until today I didn&#39;t go back to Vundle. This is almost half a year ago and I think it&#39;s time to write something up about this amazing plugin manager.</description>
      <pubDate>Sun, 03 Apr 2016 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>The power of Vim Plugins: Vundle</title>
      <link>https://snow-dev.com/posts/the-power-of-vim-plugins-vundle.html</link>
      <description>To start of this series properly, we need a plugin manager, to handle all our plugins and keep them up to date. Vundle is one common option, but there are some more to choose from. Two more big players in this business are NeoBundle and Pathogen.</description>
      <pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>The power of Vim Plugins</title>
      <link>https://snow-dev.com/posts/the-power-of-vim-plugins.html</link>
      <description>In this post I want to introduce a new series, which will cover some of the most useful Vim plugins available.</description>
      <pubDate>Wed, 16 Sep 2015 00:00:00 +0000</pubDate>
    </item>
    <item>
      <title>VPC Peering with MongoDB Atlas and AWS in Terraform</title>
      <link>https://snow-dev.com/posts/vpc-peering-with-mongodb-atlas-and-aws-in-terraform.html</link>
      <description>Lately I was doing a lot of &#34;Infrastructure as Code&#34; (IaC) in terraform at work. There was one application, which needed a MongoDB as the primary database. Sadly there is no managed MongoDB service in AWS so far.</description>
      <pubDate>Wed, 26 Dec 2018 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>